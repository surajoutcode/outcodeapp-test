name: 📦🚀 Build & deploy Android app for an environment

on:
  workflow_call:
    inputs:
      environment-name:
        required: true
        type: string
      environment-url:
        required: true
        type: string
      package-name:
        required: true
        type: string
      release-status:
        required: true
        type: string
      short-environment-name:
        required: true
        type: string
      flavor:
        required: true
        type: string
      new-pubspec-version:
        required: true
        type: string

jobs:
  deployAndroid:
    name: 🤖📦🚀 Build & deploy Android ${{ inputs.short-environment-name }} release
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment-name }}
      url: ${{ inputs.environment-url }}
    steps:
      - name: ⬇️ Checkout repository
        uses: actions/checkout@v3
      - name: ⚙️ Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "12.x"
          cache: "gradle"
        id: java
      - name: ⚙️ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.7.0"
          channel: "stable"
          cache: true
        id: flutter
      - name: 🔐 Retrieve base64 keystore and decode it to a file
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_FILE_BASE64 }}
        run: echo $KEYSTORE_BASE64 | base64 --decode > "${{ github.workspace }}/android-keystore.jks"
      - name: 📝🔐 Create keystore.properties file
        env:
          KEYSTORE_PROPERTIES_PATH: ${{ github.workspace }}/app/android/keystore.properties
        run: |
          echo '${{ inputs.flavor }}StoreFile=${{ github.workspace }}/android-keystore.jks' > $KEYSTORE_PROPERTIES_PATH
          echo '${{ inputs.flavor }}KeyAlias=${{ secrets.KEYSTORE_KEY_ALIAS }}' >> $KEYSTORE_PROPERTIES_PATH
          echo '${{ inputs.flavor }}StorePassword=${{ secrets.KEYSTORE_PASSWORD }}' >> $KEYSTORE_PROPERTIES_PATH
          echo '${{ inputs.flavor }}KeyPassword=${{ secrets.KEYSTORE_KEY_PASSWORD }}' >> $KEYSTORE_PROPERTIES_PATH
      - name: 📝 Edit pubspec version
        run: |
          sed -Ei "s/^version: (.*)/version: ${{ inputs.new-pubspec-version }}/" app/pubspec.yaml
      - name: ⚙️ Setup Melos
        uses: bluefireteam/melos-action@v2
      - name: ⚙️ Install dependencies for all packages
        run: melos build:pub_get:all
      - name: 🤖📦 Create Android ${{ inputs.short-environment-name }} appbundle release
        run: |
          pushd app
          mkdir debug-symbols
          flutter build appbundle \
            --release \
            --flavor ${{ inputs.flavor }} \
            --target lib/main_${{ inputs.flavor }}.dart
          popd
      - name: 🤖🚀 Upload Android ${{ inputs.short-environment-name }} Release to Play Store
        uses: r0adkll/upload-google-play@v1.0.19
        with:
          packageName: ${{ inputs.package-name }}
          track: internal
          status: ${{ inputs.release-status }}
          releaseFiles: ${{ github.workspace }}/app/build/app/outputs/bundle/${{ inputs.flavor }}Release/app-${{ inputs.flavor }}-release.aab
          serviceAccountJsonPlainText: "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_KEY_JSON }}"
      - name: 💬 Pick a random success catchphrase
        if: success()
        id: success_catchphrase
        run: |
          sentences=('🤩 AMAZING !' 'Woop woop 🎉' 'Oh wow 😮' '😎 Yeahhhh !' '📣 Amazing announcement !' '📢 Your attention please...' '👏 Great work !' '🍾 Champagne !' '🙌 High five !' '🥳 Time to celebrate !')
          arrayLength=${#sentences[@]}
          randomNumber=$(($RANDOM%$arrayLength))
          pickedSentence=${sentences[$randomNumber]}
          echo "picked_sentence=$pickedSentence" >> $GITHUB_OUTPUT

  sendSlackNotification:
    name: Send Slack Notification
    runs-on: ubuntu-latest
    needs: deployIos
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Determine App Release Status
        id: release_status
        run: echo "::set-output name=status::${{ needs.deployAndroid.status }}"
      - name: Custom Message based on Release Status
        id: release_message
        run: |
          custom_message_status=${{ steps.release_status.outputs.status }}
          if [[ "$custom_message_status" == "success" ]]; then
            echo "::set-output name=message::Android App released successfully. Please see testflight"
          else
            echo "::set-output name=message::Android app release failed"
          fi
      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_MESSAGE: ${{ steps.release_message.outputs.message }}
          SLACK_ICON: https://uploads-ssl.webflow.com/5956c2078993bd6177ec2360/63cdbf4a993f0090695cc509_Ourself-Logo-Full-Pos-RGB-p-500.png
          SLACK_TITLE: New App Release
